start =
    ws? e:expression ws? {return e;}

ws =
    [ \n\t] ws* /
    ";;" [^\n]* "\n"? ws*

validchar = 
    [0-9a-zA-Z_?!+\-=@#$%^&*/.]

number =
    n:[0-9]+ { return parseInt(n.join(""));}

atom =
    chars:validchar+
    { return chars.join(""); }

quote =
    "'" e:expression { return ["quote", e]; }

spaceexpression =
    ws e: expression { return e; }

expression =
    n:number {return n;} /
    a:atom {return a;} /
    "(" ws* ")" {return [];} /
    "(" ws* e: expression se: spaceexpression* ws* ")"
    {return [e].concat(se);} /
    quote
